// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quote.proto

#ifndef PROTOBUF_quote_2eproto__INCLUDED
#define PROTOBUF_quote_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace QUOTE {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_quote_2eproto();
void protobuf_AssignDesc_quote_2eproto();
void protobuf_ShutdownFile_quote_2eproto();

class quote_record;
class qrs;

// ===================================================================

class quote_record : public ::google::protobuf::Message {
 public:
  quote_record();
  virtual ~quote_record();

  quote_record(const quote_record& from);

  inline quote_record& operator=(const quote_record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const quote_record& default_instance();

  void Swap(quote_record* other);

  // implements Message ----------------------------------------------

  quote_record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const quote_record& from);
  void MergeFrom(const quote_record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 tm = 1;
  inline bool has_tm() const;
  inline void clear_tm();
  static const int kTmFieldNumber = 1;
  inline ::google::protobuf::int64 tm() const;
  inline void set_tm(::google::protobuf::int64 value);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional double price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline double price() const;
  inline void set_price(double value);

  // optional int32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional int32 level = 5 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional bool tradeable = 6 [default = false];
  inline bool has_tradeable() const;
  inline void clear_tradeable();
  static const int kTradeableFieldNumber = 6;
  inline bool tradeable() const;
  inline void set_tradeable(bool value);

  // @@protoc_insertion_point(class_scope:QUOTE.quote_record)
 private:
  inline void set_has_tm();
  inline void clear_has_tm();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_tradeable();
  inline void clear_has_tradeable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 tm_;
  ::std::string* type_;
  double price_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 level_;
  bool tradeable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_quote_2eproto();
  friend void protobuf_AssignDesc_quote_2eproto();
  friend void protobuf_ShutdownFile_quote_2eproto();

  void InitAsDefaultInstance();
  static quote_record* default_instance_;
};
// -------------------------------------------------------------------

class qrs : public ::google::protobuf::Message {
 public:
  qrs();
  virtual ~qrs();

  qrs(const qrs& from);

  inline qrs& operator=(const qrs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qrs& default_instance();

  void Swap(qrs* other);

  // implements Message ----------------------------------------------

  qrs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qrs& from);
  void MergeFrom(const qrs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // repeated .QUOTE.quote_record qr = 2;
  inline int qr_size() const;
  inline void clear_qr();
  static const int kQrFieldNumber = 2;
  inline const ::QUOTE::quote_record& qr(int index) const;
  inline ::QUOTE::quote_record* mutable_qr(int index);
  inline ::QUOTE::quote_record* add_qr();
  inline const ::google::protobuf::RepeatedPtrField< ::QUOTE::quote_record >&
      qr() const;
  inline ::google::protobuf::RepeatedPtrField< ::QUOTE::quote_record >*
      mutable_qr();

  // @@protoc_insertion_point(class_scope:QUOTE.qrs)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  ::google::protobuf::RepeatedPtrField< ::QUOTE::quote_record > qr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_quote_2eproto();
  friend void protobuf_AssignDesc_quote_2eproto();
  friend void protobuf_ShutdownFile_quote_2eproto();

  void InitAsDefaultInstance();
  static qrs* default_instance_;
};
// ===================================================================


// ===================================================================

// quote_record

// required int64 tm = 1;
inline bool quote_record::has_tm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void quote_record::set_has_tm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void quote_record::clear_has_tm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void quote_record::clear_tm() {
  tm_ = GOOGLE_LONGLONG(0);
  clear_has_tm();
}
inline ::google::protobuf::int64 quote_record::tm() const {
  return tm_;
}
inline void quote_record::set_tm(::google::protobuf::int64 value) {
  set_has_tm();
  tm_ = value;
}

// required string type = 2;
inline bool quote_record::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void quote_record::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void quote_record::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void quote_record::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& quote_record::type() const {
  return *type_;
}
inline void quote_record::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void quote_record::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void quote_record::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* quote_record::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* quote_record::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void quote_record::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double price = 3;
inline bool quote_record::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void quote_record::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void quote_record::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void quote_record::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double quote_record::price() const {
  return price_;
}
inline void quote_record::set_price(double value) {
  set_has_price();
  price_ = value;
}

// optional int32 size = 4;
inline bool quote_record::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void quote_record::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void quote_record::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void quote_record::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 quote_record::size() const {
  return size_;
}
inline void quote_record::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional int32 level = 5 [default = 0];
inline bool quote_record::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void quote_record::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void quote_record::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void quote_record::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 quote_record::level() const {
  return level_;
}
inline void quote_record::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional bool tradeable = 6 [default = false];
inline bool quote_record::has_tradeable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void quote_record::set_has_tradeable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void quote_record::clear_has_tradeable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void quote_record::clear_tradeable() {
  tradeable_ = false;
  clear_has_tradeable();
}
inline bool quote_record::tradeable() const {
  return tradeable_;
}
inline void quote_record::set_tradeable(bool value) {
  set_has_tradeable();
  tradeable_ = value;
}

// -------------------------------------------------------------------

// qrs

// required string symbol = 1;
inline bool qrs::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qrs::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qrs::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qrs::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& qrs::symbol() const {
  return *symbol_;
}
inline void qrs::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void qrs::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void qrs::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* qrs::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* qrs::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void qrs::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .QUOTE.quote_record qr = 2;
inline int qrs::qr_size() const {
  return qr_.size();
}
inline void qrs::clear_qr() {
  qr_.Clear();
}
inline const ::QUOTE::quote_record& qrs::qr(int index) const {
  return qr_.Get(index);
}
inline ::QUOTE::quote_record* qrs::mutable_qr(int index) {
  return qr_.Mutable(index);
}
inline ::QUOTE::quote_record* qrs::add_qr() {
  return qr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QUOTE::quote_record >&
qrs::qr() const {
  return qr_;
}
inline ::google::protobuf::RepeatedPtrField< ::QUOTE::quote_record >*
qrs::mutable_qr() {
  return &qr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QUOTE

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_quote_2eproto__INCLUDED
