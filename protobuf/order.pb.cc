// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include"stdafx.h"
#include "order.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TRANS_ORDER {

namespace {

const ::google::protobuf::Descriptor* order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  order_reflection_ = NULL;
const ::google::protobuf::Descriptor* orders_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  orders_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ebuysell_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_order_2eproto() {
  protobuf_AddDesc_order_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "order.proto");
  GOOGLE_CHECK(file != NULL);
  order_descriptor_ = file->message_type(0);
  static const int order_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order, buysell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order, begintm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order, endtm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order, marketorder_),
  };
  order_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      order_descriptor_,
      order::default_instance_,
      order_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(order));
  orders_descriptor_ = file->message_type(1);
  static const int orders_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(orders, order_list_),
  };
  orders_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      orders_descriptor_,
      orders::default_instance_,
      orders_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(orders, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(orders, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(orders));
  ebuysell_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_order_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    order_descriptor_, &order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    orders_descriptor_, &orders::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_order_2eproto() {
  delete order::default_instance_;
  delete order_reflection_;
  delete orders::default_instance_;
  delete orders_reflection_;
}

void protobuf_AddDesc_order_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013order.proto\022\013TRANS_ORDER\"\257\001\n\005order\022\016\n\006"
    "symbol\030\001 \002(\t\022\r\n\005price\030\002 \001(\001\022\014\n\004size\030\003 \002("
    "\005\022&\n\007buysell\030\004 \002(\0162\025.TRANS_ORDER.ebuysel"
    "l\022\017\n\004date\030\005 \001(\005:\0010\022\022\n\007begintm\030\006 \001(\001:\0010\022\020"
    "\n\005endtm\030\007 \001(\001:\0010\022\032\n\013marketorder\030\010 \001(\010:\005f"
    "alse\"0\n\006orders\022&\n\norder_list\030\001 \003(\0132\022.TRA"
    "NS_ORDER.order*\035\n\010ebuysell\022\007\n\003buy\020\000\022\010\n\004s"
    "ell\020\001", 285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "order.proto", &protobuf_RegisterTypes);
  order::default_instance_ = new order();
  orders::default_instance_ = new orders();
  order::default_instance_->InitAsDefaultInstance();
  orders::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_order_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_order_2eproto {
  StaticDescriptorInitializer_order_2eproto() {
    protobuf_AddDesc_order_2eproto();
  }
} static_descriptor_initializer_order_2eproto_;
const ::google::protobuf::EnumDescriptor* ebuysell_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ebuysell_descriptor_;
}
bool ebuysell_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int order::kSymbolFieldNumber;
const int order::kPriceFieldNumber;
const int order::kSizeFieldNumber;
const int order::kBuysellFieldNumber;
const int order::kDateFieldNumber;
const int order::kBegintmFieldNumber;
const int order::kEndtmFieldNumber;
const int order::kMarketorderFieldNumber;
#endif  // !_MSC_VER

order::order()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void order::InitAsDefaultInstance() {
}

order::order(const order& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void order::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = 0;
  size_ = 0;
  buysell_ = 0;
  date_ = 0;
  begintm_ = 0;
  endtm_ = 0;
  marketorder_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

order::~order() {
  SharedDtor();
}

void order::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return order_descriptor_;
}

const order& order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_order_2eproto();
  return *default_instance_;
}

order* order::default_instance_ = NULL;

order* order::New() const {
  return new order;
}

void order::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    price_ = 0;
    size_ = 0;
    buysell_ = 0;
    date_ = 0;
    begintm_ = 0;
    endtm_ = 0;
    marketorder_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_price;
        break;
      }

      // optional double price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required int32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buysell;
        break;
      }

      // required .TRANS_ORDER.ebuysell buysell = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buysell:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TRANS_ORDER::ebuysell_IsValid(value)) {
            set_buysell(static_cast< ::TRANS_ORDER::ebuysell >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_date;
        break;
      }

      // optional int32 date = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_begintm;
        break;
      }

      // optional double begintm = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_begintm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &begintm_)));
          set_has_begintm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_endtm;
        break;
      }

      // optional double endtm = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endtm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endtm_)));
          set_has_endtm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_marketorder;
        break;
      }

      // optional bool marketorder = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marketorder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &marketorder_)));
          set_has_marketorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // optional double price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  // required int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // required .TRANS_ORDER.ebuysell buysell = 4;
  if (has_buysell()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->buysell(), output);
  }

  // optional int32 date = 5 [default = 0];
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->date(), output);
  }

  // optional double begintm = 6 [default = 0];
  if (has_begintm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->begintm(), output);
  }

  // optional double endtm = 7 [default = 0];
  if (has_endtm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->endtm(), output);
  }

  // optional bool marketorder = 8 [default = false];
  if (has_marketorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->marketorder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional double price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  // required int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // required .TRANS_ORDER.ebuysell buysell = 4;
  if (has_buysell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->buysell(), target);
  }

  // optional int32 date = 5 [default = 0];
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->date(), target);
  }

  // optional double begintm = 6 [default = 0];
  if (has_begintm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->begintm(), target);
  }

  // optional double endtm = 7 [default = 0];
  if (has_endtm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->endtm(), target);
  }

  // optional bool marketorder = 8 [default = false];
  if (has_marketorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->marketorder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int order::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional double price = 2;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // required int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required .TRANS_ORDER.ebuysell buysell = 4;
    if (has_buysell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
    }

    // optional int32 date = 5 [default = 0];
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }

    // optional double begintm = 6 [default = 0];
    if (has_begintm()) {
      total_size += 1 + 8;
    }

    // optional double endtm = 7 [default = 0];
    if (has_endtm()) {
      total_size += 1 + 8;
    }

    // optional bool marketorder = 8 [default = false];
    if (has_marketorder()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void order::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const order* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const order*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void order::MergeFrom(const order& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_buysell()) {
      set_buysell(from.buysell());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_begintm()) {
      set_begintm(from.begintm());
    }
    if (from.has_endtm()) {
      set_endtm(from.endtm());
    }
    if (from.has_marketorder()) {
      set_marketorder(from.marketorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order::CopyFrom(const order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void order::Swap(order* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(price_, other->price_);
    std::swap(size_, other->size_);
    std::swap(buysell_, other->buysell_);
    std::swap(date_, other->date_);
    std::swap(begintm_, other->begintm_);
    std::swap(endtm_, other->endtm_);
    std::swap(marketorder_, other->marketorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = order_descriptor_;
  metadata.reflection = order_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int orders::kOrderListFieldNumber;
#endif  // !_MSC_VER

orders::orders()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void orders::InitAsDefaultInstance() {
}

orders::orders(const orders& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void orders::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

orders::~orders() {
  SharedDtor();
}

void orders::SharedDtor() {
  if (this != default_instance_) {
  }
}

void orders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* orders::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return orders_descriptor_;
}

const orders& orders::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_order_2eproto();
  return *default_instance_;
}

orders* orders::default_instance_ = NULL;

orders* orders::New() const {
  return new orders;
}

void orders::Clear() {
  order_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool orders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TRANS_ORDER.order order_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_order_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_order_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void orders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TRANS_ORDER.order order_list = 1;
  for (int i = 0; i < this->order_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->order_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* orders::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TRANS_ORDER.order order_list = 1;
  for (int i = 0; i < this->order_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->order_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int orders::ByteSize() const {
  int total_size = 0;

  // repeated .TRANS_ORDER.order order_list = 1;
  total_size += 1 * this->order_list_size();
  for (int i = 0; i < this->order_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->order_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void orders::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const orders* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const orders*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void orders::MergeFrom(const orders& from) {
  GOOGLE_CHECK_NE(&from, this);
  order_list_.MergeFrom(from.order_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void orders::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void orders::CopyFrom(const orders& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool orders::IsInitialized() const {

  for (int i = 0; i < order_list_size(); i++) {
    if (!this->order_list(i).IsInitialized()) return false;
  }
  return true;
}

void orders::Swap(orders* other) {
  if (other != this) {
    order_list_.Swap(&other->order_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata orders::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = orders_descriptor_;
  metadata.reflection = orders_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TRANS_ORDER

// @@protoc_insertion_point(global_scope)
