// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quote.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include"stdafx.h"
#include "quote.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QUOTE {

namespace {

const ::google::protobuf::Descriptor* quote_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  quote_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* qrs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qrs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_quote_2eproto() {
  protobuf_AddDesc_quote_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "quote.proto");
  GOOGLE_CHECK(file != NULL);
  quote_record_descriptor_ = file->message_type(0);
  static const int quote_record_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quote_record, tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quote_record, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quote_record, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quote_record, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quote_record, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quote_record, tradeable_),
  };
  quote_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      quote_record_descriptor_,
      quote_record::default_instance_,
      quote_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quote_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quote_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(quote_record));
  qrs_descriptor_ = file->message_type(1);
  static const int qrs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qrs, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qrs, qr_),
  };
  qrs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qrs_descriptor_,
      qrs::default_instance_,
      qrs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qrs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qrs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qrs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_quote_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    quote_record_descriptor_, &quote_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qrs_descriptor_, &qrs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_quote_2eproto() {
  delete quote_record::default_instance_;
  delete quote_record_reflection_;
  delete qrs::default_instance_;
  delete qrs_reflection_;
}

void protobuf_AddDesc_quote_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013quote.proto\022\005QUOTE\"q\n\014quote_record\022\n\n\002"
    "tm\030\001 \002(\003\022\014\n\004type\030\002 \002(\t\022\r\n\005price\030\003 \001(\001\022\014\n"
    "\004size\030\004 \001(\005\022\020\n\005level\030\005 \001(\005:\0010\022\030\n\ttradeab"
    "le\030\006 \001(\010:\005false\"6\n\003qrs\022\016\n\006symbol\030\001 \002(\t\022\037"
    "\n\002qr\030\002 \003(\0132\023.QUOTE.quote_record", 191);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "quote.proto", &protobuf_RegisterTypes);
  quote_record::default_instance_ = new quote_record();
  qrs::default_instance_ = new qrs();
  quote_record::default_instance_->InitAsDefaultInstance();
  qrs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_quote_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_quote_2eproto {
  StaticDescriptorInitializer_quote_2eproto() {
    protobuf_AddDesc_quote_2eproto();
  }
} static_descriptor_initializer_quote_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int quote_record::kTmFieldNumber;
const int quote_record::kTypeFieldNumber;
const int quote_record::kPriceFieldNumber;
const int quote_record::kSizeFieldNumber;
const int quote_record::kLevelFieldNumber;
const int quote_record::kTradeableFieldNumber;
#endif  // !_MSC_VER

quote_record::quote_record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void quote_record::InitAsDefaultInstance() {
}

quote_record::quote_record(const quote_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void quote_record::SharedCtor() {
  _cached_size_ = 0;
  tm_ = GOOGLE_LONGLONG(0);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = 0;
  size_ = 0;
  level_ = 0;
  tradeable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

quote_record::~quote_record() {
  SharedDtor();
}

void quote_record::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void quote_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* quote_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return quote_record_descriptor_;
}

const quote_record& quote_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quote_2eproto();
  return *default_instance_;
}

quote_record* quote_record::default_instance_ = NULL;

quote_record* quote_record::New() const {
  return new quote_record;
}

void quote_record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tm_ = GOOGLE_LONGLONG(0);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    price_ = 0;
    size_ = 0;
    level_ = 0;
    tradeable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool quote_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 tm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tm_)));
          set_has_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_price;
        break;
      }

      // optional double price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int32 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tradeable;
        break;
      }

      // optional bool tradeable = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradeable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tradeable_)));
          set_has_tradeable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void quote_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 tm = 1;
  if (has_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tm(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional double price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional int32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // optional int32 level = 5 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional bool tradeable = 6 [default = false];
  if (has_tradeable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->tradeable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* quote_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 tm = 1;
  if (has_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tm(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional double price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional int32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // optional int32 level = 5 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional bool tradeable = 6 [default = false];
  if (has_tradeable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->tradeable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int quote_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 tm = 1;
    if (has_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tm());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional double price = 3;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 level = 5 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional bool tradeable = 6 [default = false];
    if (has_tradeable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void quote_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const quote_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const quote_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void quote_record::MergeFrom(const quote_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tm()) {
      set_tm(from.tm());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_tradeable()) {
      set_tradeable(from.tradeable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void quote_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quote_record::CopyFrom(const quote_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quote_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void quote_record::Swap(quote_record* other) {
  if (other != this) {
    std::swap(tm_, other->tm_);
    std::swap(type_, other->type_);
    std::swap(price_, other->price_);
    std::swap(size_, other->size_);
    std::swap(level_, other->level_);
    std::swap(tradeable_, other->tradeable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata quote_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = quote_record_descriptor_;
  metadata.reflection = quote_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qrs::kSymbolFieldNumber;
const int qrs::kQrFieldNumber;
#endif  // !_MSC_VER

qrs::qrs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qrs::InitAsDefaultInstance() {
}

qrs::qrs(const qrs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qrs::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qrs::~qrs() {
  SharedDtor();
}

void qrs::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void qrs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qrs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qrs_descriptor_;
}

const qrs& qrs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quote_2eproto();
  return *default_instance_;
}

qrs* qrs::default_instance_ = NULL;

qrs* qrs::New() const {
  return new qrs;
}

void qrs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
  }
  qr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qrs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_qr;
        break;
      }

      // repeated .QUOTE.quote_record qr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_qr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qrs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // repeated .QUOTE.quote_record qr = 2;
  for (int i = 0; i < this->qr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->qr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qrs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // repeated .QUOTE.quote_record qr = 2;
  for (int i = 0; i < this->qr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->qr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qrs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  // repeated .QUOTE.quote_record qr = 2;
  total_size += 1 * this->qr_size();
  for (int i = 0; i < this->qr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qrs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qrs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qrs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qrs::MergeFrom(const qrs& from) {
  GOOGLE_CHECK_NE(&from, this);
  qr_.MergeFrom(from.qr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qrs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qrs::CopyFrom(const qrs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qrs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < qr_size(); i++) {
    if (!this->qr(i).IsInitialized()) return false;
  }
  return true;
}

void qrs::Swap(qrs* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    qr_.Swap(&other->qr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qrs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qrs_descriptor_;
  metadata.reflection = qrs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QUOTE

// @@protoc_insertion_point(global_scope)
